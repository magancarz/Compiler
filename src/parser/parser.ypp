%{
#include <iostream>
#include <fstream>
#include <string>
#include "../CodeGenerator.h"

extern FILE* yyin;

CodeGenerator* codeGenerator;

int yylex(void);
void yyerror(std::string error);
%}

%union {
    unsigned int num;
    std::string* str;
}

%token PROCEDURE PROGRAM IS VAR _BEGIN END
%token IF THEN ELSE ENDIF
%token WHILE DO ENDWHILE
%token REPEAT UNTIL
%token READ WRITE
%token NUM IDENTIFIER
%token COMMA SEMICOLON LB RB
%token ASSIGN PLUS MINUS MUL DIV MOD EQ NEQ
%token GREATER LESS GREQ LEQ
%token TEST

%%

program_all: 
    procedures main

procedures:
    %empty
    | procedures procedure                                                  {}
    | procedure                                                             {}

procedure:
    PROCEDURE proc_head IS VAR declarations _BEGIN commands END             {}
    | PROCEDURE proc_head IS _BEGIN commands END                            {}

main:
    PROGRAM IS VAR declarations _BEGIN commands END                         { codeGenerator->writeCode("HALT"); }
    | PROGRAM IS _BEGIN commands END                                        { codeGenerator->writeCode("HALT"); }

commands:
    commands command                                                        {}
    | command                                                               {}

command:
    %empty                                                                  {}
    | IDENTIFIER ASSIGN expression SEMICOLON                                {}
    | IF condition THEN commands ELSE commands ENDIF                        {}
    | IF condition THEN commands ENDIF                                      {}
    | WHILE condition DO commands ENDWHILE                                  {}
    | REPEAT commands UNTIL condition SEMICOLON                             {}
    | proc_head                                                             {}
    | READ IDENTIFIER SEMICOLON                                             {}
    | WRITE value SEMICOLON                                                 {}

proc_head:
    IDENTIFIER LB declarations RB                                           {}

declarations:
    declarations COMMA IDENTIFIER                                           {}
    | IDENTIFIER                                                            {}

expression:
    value                                                                   {}
    | value PLUS value                                                      {}
    | value MINUS value                                                     {}
    | value MUL value                                                       {}
    | value DIV value                                                       {}
    | value MOD value                                                       {}

condition:
    value EQ value                                                          {}
    | value NEQ value                                                       {}
    | value GREATER value                                                   {}
    | value LESS value                                                      {}
    | value GREQ value                                                      {}
    | value LEQ value                                                       {}

value:
    NUM                                                                     {}
    | IDENTIFIER                                                            {}

%%

void yyerror(std::string error) {
    printf("%s\n", error.c_str());
    exit(1);
}

int parser_main(int argc, char** argv) {
    codeGenerator = new CodeGenerator(argc, argv);

    yyin = codeGenerator->getInput();

    try {
        yyparse();
    } catch(std::string error) {
        yyerror(error);
    }

    std::cout << codeGenerator->getCode() << std::endl;

    delete codeGenerator;

    return 0;
}