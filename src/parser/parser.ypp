%{
    #include <stdio.h>
    #include <iostream>
    #include <fstream>
    #include <string>

    #include "../CodeGenerator.h"

	#include "../Memory.h"
    #include "../Variable.h"

    extern FILE* yyin;
    extern int yylineno;

    CodeGenerator* code_generator;
    Memory* memory;

    int yylex(void);
    void yyerror(const char* error);
%}

    %code requires {
    #include "../CodeGenerator.h"

#include "../Variable.h"
}

%union {
    unsigned int num;
    std::string* str;
    Variable* var;
    Condition* condit;
}

%token PROCEDURE PROGRAM IS VAR _BEGIN END
%token IF THEN ELSE ENDIF
%token WHILE DO ENDWHILE
%token REPEAT UNTIL
%token READ WRITE
%token NUM IDENTIFIER
%token COMMA SEMICOLON LB RB
%token ASSIGN
%left PLUS MINUS MUL DIV MOD 
%token EQ NEQ GREATER LESS GREQ LEQ
%token TEST

%type <var> value
%type <num> NUM expression commands command
%type <condit> condition
%type <str> IDENTIFIER execute_proc_head

%%

program_all: 
    procedures main

procedures:
    %empty
    | procedures procedure                                                  
    | procedure                                                             

procedure:
    PROCEDURE                                                               { code_generator->generate_initial_code_for_procedure(); }
    proc_head IS VAR proc_head_declarations _BEGIN commands END             { code_generator->generate_procedure_end_code(memory->finish_procedure($8));
                                                                              memory->clear_current_procedure(); }

    | PROCEDURE                                                             { code_generator->generate_initial_code_for_procedure(); }
    proc_head IS _BEGIN commands END                                        { code_generator->generate_procedure_end_code(memory->finish_procedure($6));
                                                                              memory->clear_current_procedure(); }

main:
    PROGRAM IS VAR declarations _BEGIN commands END                         { code_generator->write_code("HALT"); }
    | PROGRAM IS _BEGIN commands END                                        { code_generator->write_code("HALT"); }

commands:
    commands command                                                        { $$ = $1 + $2; }
    | command                                                               

command:
    %empty                                                                  
    | IDENTIFIER ASSIGN expression SEMICOLON                                { $$ = code_generator->assign_value_to_variable(*$1, $3) + $3; }
    | IF condition THEN commands ELSE                                       { code_generator->generate_middle_if_else_jump(); }
    commands ENDIF                                                          { $$ = code_generator->if_else_condition($2, $4, $7) + $4 + $7; }
    | IF condition THEN commands ENDIF                                      { $$ = code_generator->if_condition($2, $4) + $4; }
    | WHILE condition DO commands ENDWHILE                                  { $$ = code_generator->while_loop($2, $4) + $4; }
    | REPEAT commands UNTIL condition SEMICOLON                             { $$ = code_generator->repeat_until_loop($4, $2) + $2; }
    | execute_proc_head SEMICOLON                                           { $$ = code_generator->execute_procedure(*$1, memory->get_procedure_execution_variables()); }
    | READ IDENTIFIER SEMICOLON                                             { $$ = code_generator->read_value(*$2); }
    | WRITE value SEMICOLON                                                 { $$ = code_generator->print_out_value($2); }

execute_proc_head:
    IDENTIFIER LB execute_proc_head_declarations RB                         

execute_proc_head_declarations:
    execute_proc_head_declarations COMMA execute_proc_head_declaration      
    | execute_proc_head_declaration                                                 
    
execute_proc_head_declaration:
    IDENTIFIER                                                              { memory->prepare_procedure_execution_variable(*$1); }

proc_head:
    IDENTIFIER LB proc_head_declarations RB                                 { memory->set_identifier_to_current_procedure(*$1); }

proc_head_declarations:
    | proc_head_declarations COMMA proc_head_declaration                      
    | proc_head_declaration                                                 
    
proc_head_declaration:
    IDENTIFIER                                                              { memory->add_variable_to_procedure(*$1); }

declarations:
    declarations COMMA declaration                                          
    | declaration                                                           

declaration:
    IDENTIFIER                                                              { memory->add_variable_to_memory(*$1, 0); }

expression:
    value                                                                   { $$ = code_generator->set_value_to_accumulator($1); }
    | value PLUS value                                                      { $$ = code_generator->add($1, $3); }
    | value MINUS value                                                     { $$ = code_generator->subtract($1, $3); }
    | value MUL value                                                       { $$ = code_generator->multiply($1, $3); }
    | value DIV value                                                       { $$ = code_generator->divide($1, $3); }
    | value MOD value                                                       { $$ = code_generator->modulo($1, $3); }

condition:
    value EQ value                                                          { $$ = code_generator->equal($1, $3); }
    | value NEQ value                                                       { $$ = code_generator->not_equal($1, $3); }
    | value GREATER value                                                   { $$ = code_generator->greater($1, $3); }
    | value LESS value                                                      { $$ = code_generator->less($1, $3); }
    | value GREQ value                                                      { $$ = code_generator->greater_or_equal($1, $3); }
    | value LEQ value                                                       { $$ = code_generator->lesser_or_equal($1, $3); }

value:
    NUM                                                                     { $$ = memory->get_value_holder($1); }
    | IDENTIFIER                                                            { $$ = memory->get_variable_from_memory(*$1); }

%%

void yyerror(const char* error) {
    fprintf(stderr, "Error | Line: %d\n%s\n", yylineno, error);
    exit(1);
}

int parser_main(int argc, char** argv) {
    memory = new Memory();
    code_generator = new CodeGenerator(argc, argv);
    code_generator->set_memory_pointer(memory);

    yyin = code_generator->get_input();

    try {
        yyparse();
    } catch(const char* error) {
        yyerror(error);
    }

	#ifdef _DEBUG
    std::cout << code_generator->get_code() << std::endl;
	#endif
    
    code_generator->generate_output();

    delete code_generator;
    delete memory;

    return 0;
}